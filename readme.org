#+title: Readme

This is an mobile-device focused PWA that provide you with options at any point of day that are based on a set of events with conditions.
* concepts
** Event
~Event~ is an event. It includes, comprehensively:
+ title, description, unique id.
+ trigger - a predicate, determining when the event is seen a valid options
+ discarding - what other events this event is conflicted with
+ duration - the estimated duration of the event.
+ cooldown - how long before it could be scheduled again.
+ discarded, current - bool properties to mark the event as
*** trigger
a predicate function. ~absolute-clock~ and ~relative-clock~ are specially useful components of the trigger:
+ ~absolute-clock~ the time of the day.
+ ~relative-clock~ the time since another event have finished. [future: started also].
*** Speicial Events
+ Wake up - the start of all events
+ Sleep away - the end of all events, and clears the relative clock list.
*** discarding
a list of unique ids of other events that this event, when chosen, would discard.
*** discard
an event would be discarded once it is finished.
*** cooldown
+ -1 imply the event is not recurring
+ a positive value ~n~ imply the event could be scheduled again after ~n~ milliseconds, after which the ~discarded~ property of it would be set to false again.
+ example: I have a routine of checking my agenda every 2 hours, then I could set a ~check agenda~ event with ~cooldown~ of ~2 * 60 * 60 * 1000~ cooldown.
** Kernel routine
a set of aforementioned events. The order is not relevent, as ~Wake Up~ would be the common start point and events would be tested for trigger.
** Log [future]
an log that records times of Events
** in-event triggering
+ a :time variable is exposed in the log. Could use some logic to define notification/behaviour on that.
  i.e.: in workout, notify for end 5 minute before it should end; in focus session, notify for break/log every 30 minute
+ transparent to sessions: an event may be on and off severall times, the :time is still continuous
+ overide by external: may be add agenda support; but not very likely for it to be in collaboration with org-agenda, so I'd rather put that labour on man.
  the in-event triggering could be overwritten by
** Booster [future]
a Booster is ~(condition . booster)~
** Notes
+ could make trigger-func return trigger-text, so I could merge versions of tasks that only differ in trigger to 1, and they can have the corresponding trigger-text displayed.
** Tracker [future]
an tracker of events that are not clockable, like for each time drinking a cup of water, how long and how many times in total have you practiced guitar today(if you are taking short-time many-times approach).
** Reminder [future]
a list of little reminders that is valid throughout the day(or as defined in it's trigger). like "remember to log what happened", "observe the surroundings", "drink dfsdfasdfwefadfasdf"
** Routine editor [future]
+ edit, add and delete Events
+ Define routines as a sets of events
  so that I could have versions of the same routine over iterations (Hubermanv1, Hubermanv2...) and different routines to switch for func (Madmanv1)
+ Allow routine to include routine
  an example of usage is, I have an overall routine that includes Hubermanv1 as the general framework, Waterintakev2, Scholarlyv2 and Agendacheckv3 as plugin.
  Note that the handling of Wake and Sleep may be issue. Maybe set a special trigger for them, or set option/property to identify nature(i.e. say so in the data of the event)
+ allow routine to include patch
  like, delete that routine, add this routine, modify that Event. This is complex, and not too useful as I see it now. may not implement it
** Graph editor interface [future]
a graph editor where you can see the relations/paths between the events clearly, and maybe add relationship/event in there(modify triggers, add triggers)
may have to change the way triggers work(i.e. have a list of triggers working on AND or OR).
** Configuration File [future]
Make the system can be configured with a configuration file
* TODOS
+ [X] Prototype of elementary PWA app
+ [X] Data model: Event
+ [X] populate a list
+ [X] Displaying Event
+ [X] Displaying Kernel Routine
+ [X] Kernel Routine - Filter Logic
+ [X] Able to switch Current Event
+ [X] Current Event and Discarding
+ [X] Relative Clock
+ [ ] add trigger to the data
+ [ ] Use a Local Storage to persist state throughout the day
+ [X] Countdown Timer on Current Event
+ [X] CountDown Timer on Current Event (or used-to-be Current Event)

* running the project

This project works on shadow-cljsl, reagent, and tailwindcss

the file structure is created with ~npx create-cljs-project kernel-routine~
** dependencies
you need to install react@17.0.2 with reagent@
#+begin_src shell
npm install react@17.0.2 react-dom@17.0.2
#+end_src

For tailwindcss, install with instructions in [[https://tailwindcss.com/docs/installation][official guide]] slightly modified:
#+begin_src shell
npm install -D tailwindcss
npx tailwindcss init

npx tailwindcss -i ./src/css/tailwind.css -o ./public/output.css --watch
#+end_src
** commands
#+begin_src shell
npx shadow-cljs browser-repl
#+end_src
give you an in-terminal repl connected to a browser-repl. It is not terribly useful

#+begin_src shell
npx shadow-cljs watch app
#+end_src
watch the build scheme ~app~ as literated in shadow-cljs.edn. If any file is modified, it will recompile the js codes and reload them. (not refresh)

If some dependencies' missing, this would fix it too.


#+begin_src shell
npx shadow-cljs release app
#+end_src
compile a better version for release - slow, one file, and slim code

#+begin_src shell
npx shadow-cljs server app
#+end_src
serves the current version of code
** publish
after it is compiled, only ~public/index.html~, ~public/manifest.json~, ~public/sw.js~ and ~public/app/js/main.js~ is required.
+ only task of ~public/sw.js~ is to cache the website and prefer cache in every time.

* dev tips

** repl
Put the function call at start of application. It would not be repl exactly, but when you saved it, all codes get reloaded and that call would be evaluted and displayed at the top of your document, so pretty much equivallent for small testing and inspection.

* predicate language
Due to I don't know how to set up ~read~ and function serialization in clojurescript(and the appearing complexity of it), I'm designing a predicate language for the triggers. In the end I hope I will get back to clojurescript trigger predicate, but for now, the predicate language, who does not have a name.

this is clearly a very simple lisp, that does not have def or defn, only 2 built-in time predicate functions and 3 logical functions.

** basic predicates
"r wakeup 90" evaluate to true after event "wakeup" have finished for 90 minutes.
"a 12" evaluate to true after 12:00

** logical operators
"not r wakeup 90" evaluate to true before event "wakeup" have finsed for 90 minutes, and nil after that.
"and r wakeup 90 a 12" evaluate to true if event "wakeup" have finished for 90 minutes and it's past 12:00
"or r wakeup 90 a 12" same, but with or.


* resource
+ https://ericnormand.me/guide/clojurescript-tutorial
+ [[https://learn.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/how-to/][Microsoft PWA tutorial]] - the best and simplest hands-on guide I've seen so far.
